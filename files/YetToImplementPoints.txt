services.AddAuthentication(o => 
{
   o.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
   o.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
});

=======================================================================================================
var tokenValidationParameters = new TokenValidationParameters()
            {
                
                // When receiving a token, check that it is still valid.
                ValidateLifetime = true,
                // This defines the maximum allowable clock skew - i.e. provides a tolerance on the token expiry time 
                // when validating the lifetime. As we're creating the tokens locally and validating them on the same 
                // machines which should have synchronised time, this can be set to zero. and default value will be 5minutes
                ClockSkew = TimeSpan.FromMinutes(0) //.Zero
            };
============================================================================================NOt working int 2.0===========
services.AddIdentity<User, IdentityRole>(options =>
{
   options.Cookies.ApplicationCookie.LoginPath = "/login";
});
==============================================================================================NOt working int 2.0=========
options.Cookies.ApplicationCookie.Events = new CookieAuthenticationEvents
{
   OnRedirectToLogin = ctx =>
   {
       if (ctx.Request.Path.StartsWithSegments("/api") &&
           ctx.Response.StatusCode == (int) HttpStatusCode.OK)
       {
           ctx.Response.StatusCode = (int) HttpStatusCode.Unauthorized;
       }
       else
       {
           ctx.Response.Redirect(ctx.RedirectUri);
       }
       return Task.FromResult(0);
   }
};

=======================================================================================================
//JWT
            services.AddAuthorization(options =>
            {
                options.DefaultPolicy = new AuthorizationPolicyBuilder(JwtBearerDefaults.AuthenticationScheme)
                    .RequireAuthenticatedUser()
                    .Build();
            }
            );
            services.AddAuthentication(o =>
            {
                o.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                o.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            });
=======================================================================================================
services.AddJwtBearerAuthentication(o =>
            {
                // You also need to update /wwwroot/app/scripts/app.js
                o.Authority = Configuration["jwt:authority"];
                o.Audience = Configuration["jwt:audience"];
                o.Events = new JwtBearerEvents()
                {
                    OnAuthenticationFailed = c =>
                    {
                        c.HandleResponse();

                        c.Response.StatusCode = 500;
                        c.Response.ContentType = "text/plain";
                        if (Environment.IsDevelopment())
                        {
                            // Debug only, in production do not share exceptions with the remote host.
                            return c.Response.WriteAsync(c.Exception.ToString());
                        }
                        return c.Response.WriteAsync("An error occurred processing your authentication.");
                    }
                };
            });
=======================================================================================================
https://github.com/aspnet/Security/blob/c5b566ed4abffac4cd7011e0465e012cf503c871/samples/JwtBearerSample/Startup.cs#L47-L53
https://github.com/justintubbs/NetCore2_JWTExample/blob/master/WebApplication1/Startup.cs
=======================================================================================================
return Ok(new
    {
        token = new JwtSecurityTokenHandler().WriteToken(token),
        expiration = token.ValidTo
    });
=======================================================================================================
services.Configure<IdentityOptions>(options => {
    var cookie = options.Cookies.ApplicationCookie;
    var events = cookie.Events;
    cookie.Events = new CookieAuthenticationEvents {
        OnRedirectToAccessDenied = ReplaceRedirector(HttpStatusCode.Forbidden, context => events.RedirectToAccessDenied(context)),
        OnRedirectToLogin = ReplaceRedirector(HttpStatusCode.Unauthorized, context => events.RedirectToLogin(context))
    };
});
static Func<CookieRedirectContext, Task> ReplaceRedirector(HttpStatusCode statusCode, Func<CookieRedirectContext, Task> existingRedirector) =>
    context => {
        if (context.Request.Path.StartsWithSegments("/api")) {
            context.Response.StatusCode = (int)statusCode;
            return Task.CompletedTask;
        }
        return existingRedirector(context);
    };
=======================================================================================================
//All pages needs to be authenticated
            services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder()
                             .RequireAuthenticatedUser()
                             .Build();
                config.Filters.Add(new AuthorizeFilter(policy));
            });
=======================================================================================================
//services.AddCors(options => {
            //    options.AddPolicy(POLICY_NAME, policy => {
            //        policy.WithOrigins(Configuration["SP_WEB_URL"]).AllowAnyHeader().AllowAnyMethod();
            //    });
            //});
            //services.AddCors(options =>
            //{
            //    options.AddPolicy(POLICY_NAME, policy =>
            //    {
            //        policy.AllowAnyHeader().AllowAnyHeader().AllowAnyMethod();
            //    });
            //});
            services.AddCors(config =>
            {
                var policy = new CorsPolicy();
                policy.Headers.Add("*");
                policy.Methods.Add("*");
                policy.Origins.Add("*");
                policy.SupportsCredentials = true;
                config.AddPolicy(POLICY_NAME, policy);
            });

===============================================================================================================================================

Failed to load https://localhost:44396/api/startup: Response to preflight request doesn't pass access control check: 
No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'https://localhost:44345' is therefore not allowed access.
===============================================================================================================================================
{ provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },
{ provide: APP_INITIALIZER, useFactory: startupServiceFactory, deps: [StartupService], multi : true}
export function startupServiceFactory(startupService: StartupService): Function {
    return () => startupService.load();
}
import { JwtInterceptor } from './core/jwt.interceptor'


import { StartupService } from '../../core/startup.service';
export class AppComponent implements OnInit{

    constructor() { } //private startup: StartupService

    ngOnInit() {

        //if (!this.startup.Data) {
        //    console.log('startup data does not exists');
        //}
        //else {
        //    console.log('startup data exists.');
        //}
    }
}
{
            provide: APP_INITIALIZER,
            useFactory: () => {
                return () => {
                    return new Promise((resolve, reject) => {
                        setTimeout(() => {
                            resolve();
                        }, 5000);
                    });
                }
            },
            multi: true
        }
===============================================================================================================================================
//private handleError(error: Response | any) {
    //    // In a real world app, we might use a remote logging infrastructure
    //    let errMsg: string;
    //    if (error instanceof Response) {
    //        const body = error.json() || '';
    //        const err = body.error || JSON.stringify(body);
    //        errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
    //    } else {
    //        errMsg = error.message ? error.message : error.toString();
    //    }
    //    console.error("ERROR: " + errMsg);
    //    return Observable.throw(errMsg);
    //}
	===============================================================================================================================================
	//load() {
    //    console.log('StartupService load()');
    //    return this.httpClient.get('https://localhost:44396/api/ClientAppStartup').subscribe(result => {
    //        console.log('return');
    //        console.log(result);
    //        this.Data = result as StartupModel;
    //    }, error => console.error(error));
    //}
	===============================================================================================================================================
public void ConfigureServices(IServiceCollection services)  
  {
      services.AddMvc()
                  .AddJsonOptions(options =>
                  {
                      options.SerializerSettings.ContractResolver =
                          new CamelCasePropertyNamesContractResolver();
                  });
  }
  services.AddMvc()
               .AddJsonOptions(options =>
               {
                   options.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver();
               });
	===============================================================================================================================================
const params = new HttpParams();

params.set('orderBy', '"$key"')
params.set('limitToFirst', "1");

const params = new HttpParams({
  fromString: 'orderBy="$key"&limitToFirst=1'
});

const headers = new HttpHeaders()
            .set("X-CustomHeader", "custom header value");
	===============================================================================================================================================

	this.http.put("/courses/-KgVwECOnlc-LHb_B0cQ.json",
    {
        "courseListIcon": ".../main-page-logo-small-hat.png",
        "description": "Angular Tutorial For Beginners TEST",
        "iconUrl": ".../angular2-for-beginners.jpg",
        "longDescription": "...",
        "url": "new-value-for-url"
    },
    {headers})
    .subscribe(
        val => {
            console.log("PUT call successful value returned in body", 
                        val);
        },
        response => {
            console.log("PUT call in error", response);
        },
        () => {
            console.log("The PUT observable is now completed.");
        }
    );
}
================================================================================================================================================================================
httpPatchExample() {

this.http.patch("/courses/-KgVwECOnlc-LHb_B0cQ.json",
    {
        "description": "Angular Tutorial For Beginners PATCH TEST",
    })
    .subscribe(
        (val) => {
            console.log("PATCH call successful value returned in body", 
                        val);
        },
        response => {
            console.log("PATCH call in error", response);
        },
        () => {
            console.log("The PATCH observable is now completed.");
        });
}
==================================================================================================================================================================================
httpDeleteExample() {

this.http.delete("/courses/-KgVwECOnlc-LHb_B0cQ.json")
    .subscribe(
        (val) => {
            console.log("DELETE call successful value returned in body", 
                        val);
        },
        response => {
            console.log("DELETE call in error", response);
        },
        () => {
            console.log("The DELETE observable is now completed.");
        });
}

=====================================================================================================================================================================================
httpPostExample() {

this.http.post("/courses/-KgVwECOnlc-LHb_B0cQ.json",
    {
        "courseListIcon": "...",
        "description": "TEST",
        "iconUrl": "..",
        "longDescription": "...",
        "url": "new-url"
    })
    .subscribe(
        (val) => {
            console.log("POST call successful value returned in body", 
                        val);
        },
        response => {
            console.log("POST call in error", response);
        },
        () => {
            console.log("The POST observable is now completed.");
        });
}

=====================================================================================================================================================================================
How to do HTTP Requests in Parallel, and combine the Result
One way of doing HTTP requests in parallel is to use the RxJs forkjoin operator:
import 'rxjs/add/observable/forkJoin';

parallelRequests() {

    const parallel$ = Observable.forkJoin(
        this.http.get('/courses/-KgVwEBq5wbFnjj7O8Fp.json'),
        this.http.get('/courses/-KgVwECOnlc-LHb_B0cQ.json')
    );

    parallel$.subscribe(
        values => {
            console.log("all values", values)
        }
    );
}

=====================================================================================================================================================================================
export class AppComponent implements OnInit {
    courses$: Observable<Course[]>;

    constructor(private http:HttpClient) {
    }

    ngOnInit() {
        this.courses$ = this.http
            .get<Course[]>("/courses.json")
            .map(data => _.values(data))
            .do(console.log);
    }
}

===================================================================================================================================================================================
https://angular-http-guide.firebaseio.com/courses.json?orderBy="$key"&limitToFirst=1

import {HttpParams} from "@angular/common/http";

const params = new HttpParams()
    .set('orderBy', '"$key"')
    .set('limitToFirst', "1");

this.courses$ = this.http
    .get("/courses.json", {params})
    .do(console.log)
    .map(data => _.values(data))


	=========================================================
	 import { of } from 'rxjs/observable/of';

	 ===========================================


	 import 'rxjs/add/operator/do';
 
export class TimingInterceptor implements HttpInterceptor {
  constructor(private auth: AuthService) {}
 
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
  	const started = Date.now();
    return next
      .handle(req)
      .do(event => {
        if (event instanceof HttpResponse) {
          const elapsed = Date.now() - started;
          console.log(`Request for ${req.urlWithParams} took ${elapsed} ms.`);
        }
      });
  }
}

===========================================================================================
@Injectable()
class ErrorInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    return next.handle(req).catch(err => {
      if (err instanceof HttpErrorResponse {
          if (err.status === 401) {
             // JWT expired, go to login
          }
        }
    });
  }
}
============================================================================================
const headers = new HttpHeaders()
            .set('Authorization', 'my-auth-token')
            .set('Content-Type', 'application/x-www-form-urlencoded');
        const body: LoginRequestModel = { Email: "chinnarao@live.com", Password: "1111" };
=====================================================================================

<style type="text/css">
    /* default styles here for older browsers. 
       I tend to go for a 600px - 960px width max but using percentages
    */
    @media only screen and (min-width:960px){
        /* styles for browsers larger than 960px; */
    }
    @media only screen and (min-width:1440px){
        /* styles for browsers larger than 1440px; */
    }
    @media only screen and (min-width:2000px){
        /* for sumo sized (mac) screens */
    }
    @media only screen and (max-device-width:480px){
       /* styles for mobile browsers smaller than 480px; (iPhone) */
    }
    @media only screen and (device-width:768px){
       /* default iPad screens */
    }
    /* different techniques for iPad screening */
    @media only screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:portrait) {
      /* For portrait layouts only */
    }

    @media only screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:landscape) {
      /* For landscape layouts only */
    }
</style>